"""
Test script for Russian Toxic Comment Detection API
Tests various endpoints and functionality
"""

import requests
import json
import time

# API base URL
BASE_URL = "http://localhost:8000"

def test_api():
    """Test the API endpoints"""
    print("Testing Russian Toxic Comment Detection API")
    print("=" * 50)
    
    # Wait for server to start
    print("Waiting for server to start...")
    time.sleep(3)
    
    try:
        # Test health endpoint
        print("\n1. Testing health endpoint...")
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Health check: {health_data['status']}")
            print(f"   Model loaded: {health_data['model_loaded']}")
            if health_data.get('model_info'):
                print(f"   Model type: {health_data['model_info'].get('model_type', 'Unknown')}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    
    except requests.ConnectionError:
        print("‚ùå Cannot connect to API server. Is it running?")
        return False
    
    # Test root endpoint
    print("\n2. Testing root endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            root_data = response.json()
            print(f"‚úÖ Root endpoint: {root_data['message']}")
        else:
            print(f"‚ùå Root endpoint failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Root endpoint error: {str(e)}")
    
    # Test single prediction endpoint
    print("\n3. Testing single prediction endpoint...")
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",  # Non-toxic
        "—Ç–µ–±–µ —á—Ç–æ –ø–æ—Ñ–∏–≥ –Ω–∞ –≤—Å–µ—Ö",  # Toxic (from model training)
        "—Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è",  # Non-toxic
        "–¥—É—Ä–∞–∫ –∏–¥–∏–æ—Ç",  # Likely toxic
        "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å"  # Non-toxic
    ]
    
    for text in test_texts:
        try:
            payload = {"text": text}
            response = requests.post(f"{BASE_URL}/predict", json=payload)
            
            if response.status_code == 200:
                result = response.json()
                toxicity = "üî¥ TOXIC" if result['is_toxic'] else "üü¢ NON-TOXIC"
                confidence = result['toxic_probability'] if result['is_toxic'] else result['non_toxic_probability']
                print(f"   Text: '{text}'")
                print(f"   Result: {toxicity} (confidence: {confidence:.3f})")
                print()
            else:
                print(f"‚ùå Prediction failed for '{text}': {response.status_code}")
                print(f"   Error: {response.text}")
        
        except Exception as e:
            print(f"‚ùå Prediction error for '{text}': {str(e)}")
    
    # Test batch prediction endpoint
    print("\n4. Testing batch prediction endpoint...")
    try:
        batch_texts = [
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            "–∏–¥–∏–æ—Ç –¥—É—Ä–∞–∫",
            "—Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏"
        ]
        payload = {"texts": batch_texts}
        response = requests.post(f"{BASE_URL}/predict/batch", json=payload)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Batch prediction successful:")
            print(f"   Total texts: {result['total_count']}")
            print(f"   Toxic: {result['toxic_count']}")
            print(f"   Non-toxic: {result['non_toxic_count']}")
            
            for prediction in result['predictions']:
                toxicity = "üî¥ TOXIC" if prediction['is_toxic'] else "üü¢ NON-TOXIC"
                confidence = prediction['toxic_probability'] if prediction['is_toxic'] else prediction['non_toxic_probability']
                print(f"   '{prediction['text']}' -> {toxicity} ({confidence:.3f})")
        else:
            print(f"‚ùå Batch prediction failed: {response.status_code}")
            print(f"   Error: {response.text}")
    
    except Exception as e:
        print(f"‚ùå Batch prediction error: {str(e)}")
    
    # Test model info endpoint
    print("\n5. Testing model info endpoint...")
    try:
        response = requests.get(f"{BASE_URL}/model/info")
        if response.status_code == 200:
            info = response.json()
            print("‚úÖ Model info retrieved:")
            if 'model_info' in info:
                for key, value in info['model_info'].items():
                    print(f"   {key}: {value}")
        else:
            print(f"‚ùå Model info failed: {response.status_code}")
    
    except Exception as e:
        print(f"‚ùå Model info error: {str(e)}")
    
    print("\n" + "=" * 50)
    print("API testing completed!")
    return True

if __name__ == "__main__":
    success = test_api()
    if success:
        print("üéâ All tests completed successfully!")
    else:
        print("‚ùå Some tests failed. Check the server logs.")